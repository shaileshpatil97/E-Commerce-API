option_settings:
  aws:elasticbeanstalk:container:python:
    WSGIPath: run:app
  aws:elasticbeanstalk:application:environment:
    FLASK_APP: run.py
    FLASK_ENV: production
    PYTHONPATH: /var/app/current
    MONGODB_URI: ${MONGODB_URI}
    REDIS_URL: ${REDIS_URL}
    JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    MAIL_SERVER: ${MAIL_SERVER}
    MAIL_PORT: ${MAIL_PORT}
    MAIL_USE_TLS: ${MAIL_USE_TLS}
    MAIL_USERNAME: ${MAIL_USERNAME}
    MAIL_PASSWORD: ${MAIL_PASSWORD}
    MAIL_DEFAULT_SENDER: ${MAIL_DEFAULT_SENDER}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    AWS_REGION: ${AWS_REGION}
    S3_BUCKET: ${S3_BUCKET}

container_commands:
  01_install_requirements:
    command: "pip install -r requirements.txt"
  02_install_redis:
    command: |
      sudo yum install -y redis
      sudo systemctl start redis
      sudo systemctl enable redis
  03_install_supervisor:
    command: |
      sudo yum install -y supervisor
      sudo systemctl start supervisord
      sudo systemctl enable supervisord
  04_create_supervisor_config:
    command: |
      sudo tee /etc/supervisor/conf.d/celery.conf << EOF
      [program:celery]
      command=celery -A app.celery worker --loglevel=info
      directory=/var/app/current
      user=webapp
      numprocs=1
      stdout_logfile=/var/log/celery.log
      stderr_logfile=/var/log/celery.error.log
      autostart=true
      autorestart=true
      startsecs=10
      stopwaitsecs=600
      EOF
      sudo supervisorctl reread
      sudo supervisorctl update

files:
  "/etc/nginx/conf.d/proxy.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      upstream backend {
        server 127.0.0.1:5000;
      }
      
      server {
        listen 80;
        server_name localhost;
        
        location / {
          proxy_pass http://backend;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /socket.io {
          proxy_pass http://backend;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
      } 